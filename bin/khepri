#!/usr/bin/env node

var path = require('path');
var fs = require('fs');

var mkdirp = require('mkdirp');

var compile = require('../index').compile;
var compile_file = require('../index').compile_file;
var watch = require('../index').watch;


var root = path.join(__dirname, '..');

var stdout = process.stdout.write.bind(process.stdout)


// Arguments
var argParse = require('optimist')
    .wrap(80)
    .usage(
        ["Compile Khepri to Javascript.",
        "",
        "Usage: khepri [options] [-o out_file] [in_file]",
        "",
        "Compiles Khepri input from `in_file` to Javascript in `out_file`. If `in_file` is",
        "not specified, reads input from stdin. If `in_file` is a directory, compiles all",
        "*.kep files to output files paths building to paths rooted at `out_file`",
        "When `out_file` is not specified, writes output to stdout."].join('\n'))
    .boolean('help')
        .describe('help', "Print usage info")
    .boolean('version')
        .describe('version', "Print version number")
    .boolean('watch')
        .describe('watch', "Watch for for changes")
    .alias('w', 'watch')
    .options('o', {
        'describe': 'Output file or directory'
    })
    .boolean('prune', {
        default: false,
        'describe': 'Prune user defined bindings?'
    })
    .options('package_manager', {
        'default': 'amd',
        'describe': 'Package manager to target. (amd | node)'
    })
    .options('header', {
        'describe': 'Javascript header to prefix output.'
    });

var argv = argParse.argv;

// --version
if (argv.version) {
    var pack = require(path.join(root, 'package.json'));
    console.log(pack.version);
    return 0;
}

// --help
if (argv.help) {
    argParse.showHelp(stdout);
    return 0;
}


var inFile = argv._[0],
    outFile = argv['o'],
    header = argv['header'];

var options = {
    package_manager: argv.package_manager,
    prune: argv.prune
};

var defaultHeader = function(input) {
    return "/*\n * THIS FILE IS AUTO GENERATED FROM '" + input + "'\n * DO NOT EDIT\n*/\n";
};

/**
 * Error completion
 */
var err = function(e, inFile, outFile) {
    console.error(
        inFile ?
            "'" + inFile + "' " + e :
            e + '');
    return 1;
};

var ok = !outFile ?
    function(x) {
        process.stdout.setEncoding('utf8');
        process.stdout.write(x);
    } :
    function(out, inFile, outFile) {
        mkdirp(path.dirname(outFile), function(err) {
            fs.writeFile(outFile, out, 'utf8', function(err) {
                if (err) throw err;
                console.log("Compiled '" + inFile + "' to '" + outFile + "'");
            });
        });
    };

// --watch
if (argv.watch) {
    var watchr = require('watchr');
    
    if (!inFile) {
        console.log('No input directory specified, watching current directory');
        inFile = process.cwd();
    }
    
    if (!outFile) {
        console.log('No output directory specified, outputting to input directory');
        outFile = inFile;
    }
    
    return watch(
        inFile,
        outFile,
        header === undefined
            ? defaultHeader
            : header,
        options,
        ok,
        err);
}

// Normal
if (!inFile) {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', function(data) {
        compile(data, header, options, null,
            function(x) {
                return ok(x, null, outFile);
            },
            function(x) {
                return err(x, null, outFile);
            });
    });
} else {
    return compile_file(
        inFile,
        outFile,
        header === undefined
            ? defaultHeader
            : header,
        options,
        ok,
        err);
}
